import fs

type alias Common = {
    zero: number,
    one: number
}

reducer: number -> Common -> string -> Common
reducer index common line =
    if line.charAt(index) == "0" then
        {
            zero: common.zero + 1,
            one: common.one
        }
    else
        {
            zero: common.zero,
            one: common.one + 1
        }

mostCommon: number -> List string -> Common
mostCommon index bits =
    let
        something: Common -> string -> Common
        something x y =
            reducer index x y
    in
        bits.reduce something {
            zero: 0,
            one: 0
        }

commonBits: List string -> List Common
commonBits xs =
    let
        truthy: string -> boolean
        truthy str =
            true

        firstElement: any
        firstElement =
            xs.find truthy

        length: number
        length =
            firstElement
                |> \x -> x.length

        lengthMinusOne: number
        lengthMinusOne =
            length - 1

        commoner: number -> Common
        commoner x =
            mostCommon x xs
    in
        [ 0..lengthMinusOne ]
            |> \x -> x.map commoner

gammaToString: Common -> string
gammaToString common =
    if common.zero > common.one then
        "0"
    else
        "1"

epsilonToString: Common -> string
epsilonToString common =
    if common.zero > common.one then
        "1"
    else
        "0"

getNumber: string -> number
getNumber str =
    parseInt str 2

allGammaToString: List Common -> List string
allGammaToString xs =
    xs.map gammaToString

allEpsilonToString: List Common -> List string
allEpsilonToString xs =
    xs.map epsilonToString

join: List string -> string
join str =
    str.join ""

calc: List string -> number
calc xs =
    let
        common: List Common
        common =
            commonBits xs

        gamma: number
        gamma =
            allGammaToString common
                |> join
                |> getNumber

        epsilon: number
        epsilon =
            allEpsilonToString common
                |> join
                |> getNumber

        nothing: void
        nothing =
            console.log gamma
    in
        gamma * epsilon

exampleMain: void
exampleMain =
    [
        "00100",
        "11110",
        "10110",
        "10111",
        "10101",
        "01111",
        "00111",
        "11100",
        "10000",
        "11001",
        "00010",
        "01010"
    ]
        |> calc
        |> console.log

adventInput: List string
adventInput =
    fs.readFileSync "input.txt"
        |> toString
        |> split

split: string -> List string
split file =
    file.split("\n")

toString: Buffer -> string
toString buffer =
    buffer.toString()

main: void
main =
    adventInput
        |> calc
        |> console.log
