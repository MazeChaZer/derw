import fs

type alias Boat = {
    horizontal: number,
    depth: number
}

forward: number -> Boat -> Boat
forward x boat =
    {
        horizontal: x + boat.horizontal,
        depth: boat.depth
    }

up: number -> Boat -> Boat
up y boat =
    {
        horizontal: boat.horizontal,
        depth: boat.depth - y
    }

down: number -> Boat -> Boat
down y boat =
    {
        horizontal: boat.horizontal,
        depth: boat.depth + y
    }

getMulti: Boat -> number
getMulti boat =
    boat.horizontal * boat.depth

run: Boat -> Command -> Boat
run boat command =
    if command.command == "forward" then
        forward command.amount boat
    else
        if command.command == "up" then
            up command.amount boat
        else
            down command.amount boat

runAll: List Command -> Boat
runAll commands =
    commands.reduce run {
        horizontal: 0,
        depth: 0
    }

type alias Command = {
    command: string,
    amount: number
}

parseLine: string -> Command
parseLine str =
    let
        piece: List string
        piece =
            str.split " "

        left: string
        left =
            piece[0]

        right: number
        right =
            parseInt piece[1]
    in
        {
            command: left,
            amount: right
        }

parseLines: List string -> List Command
parseLines lines =
    lines.map parseLine

exampleMain: void
exampleMain =
    [
        "forward 5",
        "down 5",
        "forward 8",
        "up 3",
        "down 8",
        "forward 2"
    ]
        |> parseLines
        |> runAll
        |> console.log

adventInput: List Command
adventInput =
    fs.readFileSync "input.txt"
        |> toString
        |> split
        |> parseLines

split: string -> List string
split file =
    file.split "\n"

toString: Buffer -> string
toString buffer =
    buffer.toString()

main: void
main =
    adventInput
        |> runAll
        |> console.log
