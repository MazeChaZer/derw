import "./Maybe" exposing ( Maybe )

exposing (emptyList, map, filter, foldl, filterMap, append)

emptyList: List a
emptyList =
    [ ]

map: (a -> b) -> List a -> List b
map fn xs =
    xs.map fn

filter: (a -> boolean) -> List a -> List b
filter fn xs =
    xs.filter fn

foldl: (a -> b -> b) -> b -> List a -> b
foldl fn init xs =
    xs.reduce fn init

filterMapHelp: (a -> Maybe b) -> a -> List b -> List b
filterMapHelp fn a xs =
    case fn a of
        Just { value } ->
            append xs [ value ]
        Nothing ->
            xs

filterMap: (a -> Maybe b) -> List a -> List b
filterMap fn xs =
    let
        help: a -> List b -> List b
        help y ys =
            filterMapHelp fn y ys
    in
        foldl help [] xs

append: List a -> List a -> List a
append xs ys =
    emptyList.concat xs ys
